{"version":3,"sources":["../static/js/0.216c0b23.chunk.js","polyfills/intersection-observer.js"],"names":["webpackJsonp","345","module","exports","window","document","IntersectionObserverEntry","entry","this","time","target","rootBounds","boundingClientRect","intersectionRect","getEmptyRect","isIntersecting","targetRect","targetArea","width","height","intersectionArea","intersectionRatio","IntersectionObserver","callback","opt_options","options","Error","root","nodeType","_checkForIntersections","throttle","bind","THROTTLE_TIMEOUT","_callback","_observationTargets","_queuedEntries","_rootMarginValues","_parseRootMargin","rootMargin","thresholds","_initThresholds","threshold","map","margin","value","unit","join","now","performance","fn","timeout","timer","setTimeout","addEvent","node","event","opt_useCapture","addEventListener","attachEvent","removeEvent","removeEventListener","detatchEvent","computeRectIntersection","rect1","rect2","top","Math","max","bottom","min","left","right","getBoundingClientRect","el","rect","err","containsDeep","parent","child","getParentNode","parentNode","host","prototype","Object","defineProperty","get","registry","POLL_INTERVAL","USE_MUTATION_OBSERVER","observe","some","item","element","_registerInstance","push","_monitorIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","slice","opt_threshold","Array","isArray","sort","t","i","a","isNaN","opt_rootMargin","marginString","margins","split","parts","exec","parseFloat","_monitoringIntersections","_monitoringInterval","setInterval","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","forEach","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","_hasCrossedThreshold","getComputedStyle","display","atRoot","parentRect","parentComputedStyle","body","documentElement","overflow","html","clientWidth","clientHeight","_expandRectByRootMargin","newRect","oldRatio","newRatio","indexOf","index","splice"],"mappings":"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","file":"static/js/0.216c0b23.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 345:\n/***/ (function(module, exports) {\n\n/* eslint-disable *//**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */(function(window,document){'use strict';// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif('IntersectionObserver'in window&&'IntersectionObserverEntry'in window&&'intersectionRatio'in window.IntersectionObserverEntry.prototype){// Minimal polyfill for Edge 15's lack of `isIntersecting`\n// See: https://github.com/w3c/IntersectionObserver/issues/211\nif(!('isIntersecting'in window.IntersectionObserverEntry.prototype)){Object.defineProperty(window.IntersectionObserverEntry.prototype,'isIntersecting',{get:function get(){return this.intersectionRatio>0;}});}return;}/**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observering a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */var registry=[];/**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */function IntersectionObserverEntry(entry){this.time=entry.time;this.target=entry.target;this.rootBounds=entry.rootBounds;this.boundingClientRect=entry.boundingClientRect;this.intersectionRect=entry.intersectionRect||getEmptyRect();this.isIntersecting=!!entry.intersectionRect;// Calculates the intersection ratio.\nvar targetRect=this.boundingClientRect;var targetArea=targetRect.width*targetRect.height;var intersectionRect=this.intersectionRect;var intersectionArea=intersectionRect.width*intersectionRect.height;// Sets intersection ratio.\nif(targetArea){this.intersectionRatio=intersectionArea/targetArea;}else{// If area is zero and is intersecting, sets to 1, otherwise to 0\nthis.intersectionRatio=this.isIntersecting?1:0;}}/**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */function IntersectionObserver(callback,opt_options){var options=opt_options||{};if(typeof callback!='function'){throw new Error('callback must be a function');}if(options.root&&options.root.nodeType!=1){throw new Error('root must be an Element');}// Binds and throttles `this._checkForIntersections`.\nthis._checkForIntersections=throttle(this._checkForIntersections.bind(this),this.THROTTLE_TIMEOUT);// Private properties.\nthis._callback=callback;this._observationTargets=[];this._queuedEntries=[];this._rootMarginValues=this._parseRootMargin(options.rootMargin);// Public properties.\nthis.thresholds=this._initThresholds(options.threshold);this.root=options.root||null;this.rootMargin=this._rootMarginValues.map(function(margin){return margin.value+margin.unit;}).join(' ');}/**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */IntersectionObserver.prototype.THROTTLE_TIMEOUT=100;/**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */IntersectionObserver.prototype.POLL_INTERVAL=null;/**\n   * Use a mutation observer on the root element\n   * to detect intersection changes.\n   */IntersectionObserver.prototype.USE_MUTATION_OBSERVER=true;/**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */IntersectionObserver.prototype.observe=function(target){var isTargetAlreadyObserved=this._observationTargets.some(function(item){return item.element==target;});if(isTargetAlreadyObserved){return;}if(!(target&&target.nodeType==1)){throw new Error('target must be an Element');}this._registerInstance();this._observationTargets.push({element:target,entry:null});this._monitorIntersections();this._checkForIntersections();};/**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */IntersectionObserver.prototype.unobserve=function(target){this._observationTargets=this._observationTargets.filter(function(item){return item.element!=target;});if(!this._observationTargets.length){this._unmonitorIntersections();this._unregisterInstance();}};/**\n   * Stops observing all target elements for intersection changes.\n   */IntersectionObserver.prototype.disconnect=function(){this._observationTargets=[];this._unmonitorIntersections();this._unregisterInstance();};/**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */IntersectionObserver.prototype.takeRecords=function(){var records=this._queuedEntries.slice();this._queuedEntries=[];return records;};/**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */IntersectionObserver.prototype._initThresholds=function(opt_threshold){var threshold=opt_threshold||[0];if(!Array.isArray(threshold))threshold=[threshold];return threshold.sort().filter(function(t,i,a){if(typeof t!='number'||isNaN(t)||t<0||t>1){throw new Error('threshold must be a number between 0 and 1 inclusively');}return t!==a[i-1];});};/**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */IntersectionObserver.prototype._parseRootMargin=function(opt_rootMargin){var marginString=opt_rootMargin||'0px';var margins=marginString.split(/\\s+/).map(function(margin){var parts=/^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);if(!parts){throw new Error('rootMargin must be specified in pixels or percent');}return{value:parseFloat(parts[1]),unit:parts[2]};});// Handles shorthand.\nmargins[1]=margins[1]||margins[0];margins[2]=margins[2]||margins[0];margins[3]=margins[3]||margins[1];return margins;};/**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibilty state is visible.\n   * @private\n   */IntersectionObserver.prototype._monitorIntersections=function(){if(!this._monitoringIntersections){this._monitoringIntersections=true;// If a poll interval is set, use polling instead of listening to\n// resize and scroll events or DOM mutations.\nif(this.POLL_INTERVAL){this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL);}else{addEvent(window,'resize',this._checkForIntersections,true);addEvent(document,'scroll',this._checkForIntersections,true);if(this.USE_MUTATION_OBSERVER&&'MutationObserver'in window){this._domObserver=new MutationObserver(this._checkForIntersections);this._domObserver.observe(document,{attributes:true,childList:true,characterData:true,subtree:true});}}}};/**\n   * Stops polling for intersection changes.\n   * @private\n   */IntersectionObserver.prototype._unmonitorIntersections=function(){if(this._monitoringIntersections){this._monitoringIntersections=false;clearInterval(this._monitoringInterval);this._monitoringInterval=null;removeEvent(window,'resize',this._checkForIntersections,true);removeEvent(document,'scroll',this._checkForIntersections,true);if(this._domObserver){this._domObserver.disconnect();this._domObserver=null;}}};/**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */IntersectionObserver.prototype._checkForIntersections=function(){var rootIsInDom=this._rootIsInDom();var rootRect=rootIsInDom?this._getRootRect():getEmptyRect();this._observationTargets.forEach(function(item){var target=item.element;var targetRect=getBoundingClientRect(target);var rootContainsTarget=this._rootContainsTarget(target);var oldEntry=item.entry;var intersectionRect=rootIsInDom&&rootContainsTarget&&this._computeTargetAndRootIntersection(target,rootRect);var newEntry=item.entry=new IntersectionObserverEntry({time:now(),target:target,boundingClientRect:targetRect,rootBounds:rootRect,intersectionRect:intersectionRect});if(!oldEntry){this._queuedEntries.push(newEntry);}else if(rootIsInDom&&rootContainsTarget){// If the new entry intersection ratio has crossed any of the\n// thresholds, add a new entry.\nif(this._hasCrossedThreshold(oldEntry,newEntry)){this._queuedEntries.push(newEntry);}}else{// If the root is not in the DOM or target is not contained within\n// root but the previous entry for this target had an intersection,\n// add a new record indicating removal.\nif(oldEntry&&oldEntry.isIntersecting){this._queuedEntries.push(newEntry);}}},this);if(this._queuedEntries.length){this._callback(this.takeRecords(),this);}};/**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */IntersectionObserver.prototype._computeTargetAndRootIntersection=function(target,rootRect){// If the element isn't displayed, an intersection can't happen.\nif(window.getComputedStyle(target).display=='none')return;var targetRect=getBoundingClientRect(target);var intersectionRect=targetRect;var parent=getParentNode(target);var atRoot=false;while(!atRoot){var parentRect=null;var parentComputedStyle=parent.nodeType==1?window.getComputedStyle(parent):{};// If the parent isn't displayed, an intersection can't happen.\nif(parentComputedStyle.display=='none')return;if(parent==this.root||parent==document){atRoot=true;parentRect=rootRect;}else{// If the element has a non-visible overflow, and it's not the <body>\n// or <html> element, update the intersection rect.\n// Note: <body> and <html> cannot be clipped to a rect that's not also\n// the document rect, so no need to compute a new intersection.\nif(parent!=document.body&&parent!=document.documentElement&&parentComputedStyle.overflow!='visible'){parentRect=getBoundingClientRect(parent);}}// If either of the above conditionals set a new parentRect,\n// calculate new intersection data.\nif(parentRect){intersectionRect=computeRectIntersection(parentRect,intersectionRect);if(!intersectionRect)break;}parent=getParentNode(parent);}return intersectionRect;};/**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {Object} The expanded root rect.\n   * @private\n   */IntersectionObserver.prototype._getRootRect=function(){var rootRect;if(this.root){rootRect=getBoundingClientRect(this.root);}else{// Use <html>/<body> instead of window since scroll bars affect size.\nvar html=document.documentElement;var body=document.body;rootRect={top:0,left:0,right:html.clientWidth||body.clientWidth,width:html.clientWidth||body.clientWidth,bottom:html.clientHeight||body.clientHeight,height:html.clientHeight||body.clientHeight};}return this._expandRectByRootMargin(rootRect);};/**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {Object} rect The rect object to expand.\n   * @return {Object} The expanded rect.\n   * @private\n   */IntersectionObserver.prototype._expandRectByRootMargin=function(rect){var margins=this._rootMarginValues.map(function(margin,i){return margin.unit=='px'?margin.value:margin.value*(i%2?rect.width:rect.height)/100;});var newRect={top:rect.top-margins[0],right:rect.right+margins[1],bottom:rect.bottom+margins[2],left:rect.left-margins[3]};newRect.width=newRect.right-newRect.left;newRect.height=newRect.bottom-newRect.top;return newRect;};/**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */IntersectionObserver.prototype._hasCrossedThreshold=function(oldEntry,newEntry){// To make comparing easier, an entry that has a ratio of 0\n// but does not actually intersect is given a value of -1\nvar oldRatio=oldEntry&&oldEntry.isIntersecting?oldEntry.intersectionRatio||0:-1;var newRatio=newEntry.isIntersecting?newEntry.intersectionRatio||0:-1;// Ignore unchanged ratios\nif(oldRatio===newRatio)return;for(var i=0;i<this.thresholds.length;i++){var threshold=this.thresholds[i];// Return true if an entry matches a threshold or if the new ratio\n// and the old ratio are on the opposite sides of a threshold.\nif(threshold==oldRatio||threshold==newRatio||threshold<oldRatio!==threshold<newRatio){return true;}}};/**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */IntersectionObserver.prototype._rootIsInDom=function(){return!this.root||containsDeep(document,this.root);};/**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */IntersectionObserver.prototype._rootContainsTarget=function(target){return containsDeep(this.root||document,target);};/**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */IntersectionObserver.prototype._registerInstance=function(){if(registry.indexOf(this)<0){registry.push(this);}};/**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */IntersectionObserver.prototype._unregisterInstance=function(){var index=registry.indexOf(this);if(index!=-1)registry.splice(index,1);};/**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */function now(){return window.performance&&performance.now&&performance.now();}/**\n   * Throttles a function and delays its executiong, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */function throttle(fn,timeout){var timer=null;return function(){if(!timer){timer=setTimeout(function(){fn();timer=null;},timeout);}};}/**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */function addEvent(node,event,fn,opt_useCapture){if(typeof node.addEventListener=='function'){node.addEventListener(event,fn,opt_useCapture||false);}else if(typeof node.attachEvent=='function'){node.attachEvent('on'+event,fn);}}/**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */function removeEvent(node,event,fn,opt_useCapture){if(typeof node.removeEventListener=='function'){node.removeEventListener(event,fn,opt_useCapture||false);}else if(typeof node.detatchEvent=='function'){node.detatchEvent('on'+event,fn);}}/**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object} The intersection rect or undefined if no intersection\n   *     is found.\n   */function computeRectIntersection(rect1,rect2){var top=Math.max(rect1.top,rect2.top);var bottom=Math.min(rect1.bottom,rect2.bottom);var left=Math.max(rect1.left,rect2.left);var right=Math.min(rect1.right,rect2.right);var width=right-left;var height=bottom-top;return width>=0&&height>=0&&{top:top,bottom:bottom,left:left,right:right,width:width,height:height};}/**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {Object} The (possibly shimmed) rect of the element.\n   */function getBoundingClientRect(el){var rect;try{rect=el.getBoundingClientRect();}catch(err){// Ignore Windows 7 IE11 \"Unspecified error\"\n// https://github.com/w3c/IntersectionObserver/pull/205\n}if(!rect)return getEmptyRect();// Older IE\nif(!(rect.width&&rect.height)){rect={top:rect.top,right:rect.right,bottom:rect.bottom,left:rect.left,width:rect.right-rect.left,height:rect.bottom-rect.top};}return rect;}/**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {Object} The empty rect.\n   */function getEmptyRect(){return{top:0,bottom:0,left:0,right:0,width:0,height:0};}/**\n   * Checks to see if a parent element contains a child elemnt (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */function containsDeep(parent,child){var node=child;while(node){if(node==parent)return true;node=getParentNode(node);}return false;}/**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */function getParentNode(node){var parent=node.parentNode;if(parent&&parent.nodeType==11&&parent.host){// If the parent is a shadow root, return the host element.\nreturn parent.host;}return parent;}// Exposes the constructors globally.\nwindow.IntersectionObserver=IntersectionObserver;window.IntersectionObserverEntry=IntersectionObserverEntry;})(window,document);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.216c0b23.chunk.js","/* eslint-disable */\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n\n(function(window, document) {\n  'use strict';\n\n  // Exits early if all IntersectionObserver and IntersectionObserverEntry\n  // features are natively supported.\n  if (\n    'IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype\n  ) {\n    // Minimal polyfill for Edge 15's lack of `isIntersecting`\n    // See: https://github.com/w3c/IntersectionObserver/issues/211\n    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n      Object.defineProperty(\n        window.IntersectionObserverEntry.prototype,\n        'isIntersecting',\n        {\n          get: function() {\n            return this.intersectionRatio > 0;\n          },\n        }\n      );\n    }\n    return;\n  }\n\n  /**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observering a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */\n  var registry = [];\n\n  /**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */\n  function IntersectionObserverEntry(entry) {\n    this.time = entry.time;\n    this.target = entry.target;\n    this.rootBounds = entry.rootBounds;\n    this.boundingClientRect = entry.boundingClientRect;\n    this.intersectionRect = entry.intersectionRect || getEmptyRect();\n    this.isIntersecting = !!entry.intersectionRect;\n\n    // Calculates the intersection ratio.\n    var targetRect = this.boundingClientRect;\n    var targetArea = targetRect.width * targetRect.height;\n    var intersectionRect = this.intersectionRect;\n    var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n    // Sets intersection ratio.\n    if (targetArea) {\n      this.intersectionRatio = intersectionArea / targetArea;\n    } else {\n      // If area is zero and is intersecting, sets to 1, otherwise to 0\n      this.intersectionRatio = this.isIntersecting ? 1 : 0;\n    }\n  }\n\n  /**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */\n  function IntersectionObserver(callback, opt_options) {\n    var options = opt_options || {};\n\n    if (typeof callback != 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    if (options.root && options.root.nodeType != 1) {\n      throw new Error('root must be an Element');\n    }\n\n    // Binds and throttles `this._checkForIntersections`.\n    this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this),\n      this.THROTTLE_TIMEOUT\n    );\n\n    // Private properties.\n    this._callback = callback;\n    this._observationTargets = [];\n    this._queuedEntries = [];\n    this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n    // Public properties.\n    this.thresholds = this._initThresholds(options.threshold);\n    this.root = options.root || null;\n    this.rootMargin = this._rootMarginValues\n      .map(function(margin) {\n        return margin.value + margin.unit;\n      })\n      .join(' ');\n  }\n\n  /**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */\n  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n  /**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */\n  IntersectionObserver.prototype.POLL_INTERVAL = null;\n\n  /**\n   * Use a mutation observer on the root element\n   * to detect intersection changes.\n   */\n  IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n  /**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */\n  IntersectionObserver.prototype.observe = function(target) {\n    var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n      return item.element == target;\n    });\n\n    if (isTargetAlreadyObserved) {\n      return;\n    }\n\n    if (!(target && target.nodeType == 1)) {\n      throw new Error('target must be an Element');\n    }\n\n    this._registerInstance();\n    this._observationTargets.push({ element: target, entry: null });\n    this._monitorIntersections();\n    this._checkForIntersections();\n  };\n\n  /**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */\n  IntersectionObserver.prototype.unobserve = function(target) {\n    this._observationTargets = this._observationTargets.filter(function(item) {\n      return item.element != target;\n    });\n    if (!this._observationTargets.length) {\n      this._unmonitorIntersections();\n      this._unregisterInstance();\n    }\n  };\n\n  /**\n   * Stops observing all target elements for intersection changes.\n   */\n  IntersectionObserver.prototype.disconnect = function() {\n    this._observationTargets = [];\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  };\n\n  /**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */\n  IntersectionObserver.prototype.takeRecords = function() {\n    var records = this._queuedEntries.slice();\n    this._queuedEntries = [];\n    return records;\n  };\n\n  /**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */\n  IntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n    var threshold = opt_threshold || [0];\n    if (!Array.isArray(threshold)) threshold = [threshold];\n\n    return threshold.sort().filter(function(t, i, a) {\n      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n        throw new Error(\n          'threshold must be a number between 0 and 1 inclusively'\n        );\n      }\n      return t !== a[i - 1];\n    });\n  };\n\n  /**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */\n  IntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n    var marginString = opt_rootMargin || '0px';\n    var margins = marginString.split(/\\s+/).map(function(margin) {\n      var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n      if (!parts) {\n        throw new Error('rootMargin must be specified in pixels or percent');\n      }\n      return { value: parseFloat(parts[1]), unit: parts[2] };\n    });\n\n    // Handles shorthand.\n    margins[1] = margins[1] || margins[0];\n    margins[2] = margins[2] || margins[0];\n    margins[3] = margins[3] || margins[1];\n\n    return margins;\n  };\n\n  /**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibilty state is visible.\n   * @private\n   */\n  IntersectionObserver.prototype._monitorIntersections = function() {\n    if (!this._monitoringIntersections) {\n      this._monitoringIntersections = true;\n\n      // If a poll interval is set, use polling instead of listening to\n      // resize and scroll events or DOM mutations.\n      if (this.POLL_INTERVAL) {\n        this._monitoringInterval = setInterval(\n          this._checkForIntersections,\n          this.POLL_INTERVAL\n        );\n      } else {\n        addEvent(window, 'resize', this._checkForIntersections, true);\n        addEvent(document, 'scroll', this._checkForIntersections, true);\n\n        if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n          this._domObserver = new MutationObserver(this._checkForIntersections);\n          this._domObserver.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true,\n          });\n        }\n      }\n    }\n  };\n\n  /**\n   * Stops polling for intersection changes.\n   * @private\n   */\n  IntersectionObserver.prototype._unmonitorIntersections = function() {\n    if (this._monitoringIntersections) {\n      this._monitoringIntersections = false;\n\n      clearInterval(this._monitoringInterval);\n      this._monitoringInterval = null;\n\n      removeEvent(window, 'resize', this._checkForIntersections, true);\n      removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this._domObserver) {\n        this._domObserver.disconnect();\n        this._domObserver = null;\n      }\n    }\n  };\n\n  /**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */\n  IntersectionObserver.prototype._checkForIntersections = function() {\n    var rootIsInDom = this._rootIsInDom();\n    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n    this._observationTargets.forEach(function(item) {\n      var target = item.element;\n      var targetRect = getBoundingClientRect(target);\n      var rootContainsTarget = this._rootContainsTarget(target);\n      var oldEntry = item.entry;\n      var intersectionRect =\n        rootIsInDom &&\n        rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n      var newEntry = (item.entry = new IntersectionObserverEntry({\n        time: now(),\n        target: target,\n        boundingClientRect: targetRect,\n        rootBounds: rootRect,\n        intersectionRect: intersectionRect,\n      }));\n\n      if (!oldEntry) {\n        this._queuedEntries.push(newEntry);\n      } else if (rootIsInDom && rootContainsTarget) {\n        // If the new entry intersection ratio has crossed any of the\n        // thresholds, add a new entry.\n        if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n          this._queuedEntries.push(newEntry);\n        }\n      } else {\n        // If the root is not in the DOM or target is not contained within\n        // root but the previous entry for this target had an intersection,\n        // add a new record indicating removal.\n        if (oldEntry && oldEntry.isIntersecting) {\n          this._queuedEntries.push(newEntry);\n        }\n      }\n    }, this);\n\n    if (this._queuedEntries.length) {\n      this._callback(this.takeRecords(), this);\n    }\n  };\n\n  /**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */\n  IntersectionObserver.prototype._computeTargetAndRootIntersection = function(\n    target,\n    rootRect\n  ) {\n    // If the element isn't displayed, an intersection can't happen.\n    if (window.getComputedStyle(target).display == 'none') return;\n\n    var targetRect = getBoundingClientRect(target);\n    var intersectionRect = targetRect;\n    var parent = getParentNode(target);\n    var atRoot = false;\n\n    while (!atRoot) {\n      var parentRect = null;\n      var parentComputedStyle =\n        parent.nodeType == 1 ? window.getComputedStyle(parent) : {};\n\n      // If the parent isn't displayed, an intersection can't happen.\n      if (parentComputedStyle.display == 'none') return;\n\n      if (parent == this.root || parent == document) {\n        atRoot = true;\n        parentRect = rootRect;\n      } else {\n        // If the element has a non-visible overflow, and it's not the <body>\n        // or <html> element, update the intersection rect.\n        // Note: <body> and <html> cannot be clipped to a rect that's not also\n        // the document rect, so no need to compute a new intersection.\n        if (\n          parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible'\n        ) {\n          parentRect = getBoundingClientRect(parent);\n        }\n      }\n\n      // If either of the above conditionals set a new parentRect,\n      // calculate new intersection data.\n      if (parentRect) {\n        intersectionRect = computeRectIntersection(\n          parentRect,\n          intersectionRect\n        );\n\n        if (!intersectionRect) break;\n      }\n      parent = getParentNode(parent);\n    }\n    return intersectionRect;\n  };\n\n  /**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {Object} The expanded root rect.\n   * @private\n   */\n  IntersectionObserver.prototype._getRootRect = function() {\n    var rootRect;\n    if (this.root) {\n      rootRect = getBoundingClientRect(this.root);\n    } else {\n      // Use <html>/<body> instead of window since scroll bars affect size.\n      var html = document.documentElement;\n      var body = document.body;\n      rootRect = {\n        top: 0,\n        left: 0,\n        right: html.clientWidth || body.clientWidth,\n        width: html.clientWidth || body.clientWidth,\n        bottom: html.clientHeight || body.clientHeight,\n        height: html.clientHeight || body.clientHeight,\n      };\n    }\n    return this._expandRectByRootMargin(rootRect);\n  };\n\n  /**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {Object} rect The rect object to expand.\n   * @return {Object} The expanded rect.\n   * @private\n   */\n  IntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n    var margins = this._rootMarginValues.map(function(margin, i) {\n      return margin.unit == 'px'\n        ? margin.value\n        : margin.value * (i % 2 ? rect.width : rect.height) / 100;\n    });\n    var newRect = {\n      top: rect.top - margins[0],\n      right: rect.right + margins[1],\n      bottom: rect.bottom + margins[2],\n      left: rect.left - margins[3],\n    };\n    newRect.width = newRect.right - newRect.left;\n    newRect.height = newRect.bottom - newRect.top;\n\n    return newRect;\n  };\n\n  /**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */\n  IntersectionObserver.prototype._hasCrossedThreshold = function(\n    oldEntry,\n    newEntry\n  ) {\n    // To make comparing easier, an entry that has a ratio of 0\n    // but does not actually intersect is given a value of -1\n    var oldRatio =\n      oldEntry && oldEntry.isIntersecting\n        ? oldEntry.intersectionRatio || 0\n        : -1;\n    var newRatio = newEntry.isIntersecting\n      ? newEntry.intersectionRatio || 0\n      : -1;\n\n    // Ignore unchanged ratios\n    if (oldRatio === newRatio) return;\n\n    for (var i = 0; i < this.thresholds.length; i++) {\n      var threshold = this.thresholds[i];\n\n      // Return true if an entry matches a threshold or if the new ratio\n      // and the old ratio are on the opposite sides of a threshold.\n      if (\n        threshold == oldRatio ||\n        threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio\n      ) {\n        return true;\n      }\n    }\n  };\n\n  /**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */\n  IntersectionObserver.prototype._rootIsInDom = function() {\n    return !this.root || containsDeep(document, this.root);\n  };\n\n  /**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */\n  IntersectionObserver.prototype._rootContainsTarget = function(target) {\n    return containsDeep(this.root || document, target);\n  };\n\n  /**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */\n  IntersectionObserver.prototype._registerInstance = function() {\n    if (registry.indexOf(this) < 0) {\n      registry.push(this);\n    }\n  };\n\n  /**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */\n  IntersectionObserver.prototype._unregisterInstance = function() {\n    var index = registry.indexOf(this);\n    if (index != -1) registry.splice(index, 1);\n  };\n\n  /**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */\n  function now() {\n    return window.performance && performance.now && performance.now();\n  }\n\n  /**\n   * Throttles a function and delays its executiong, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */\n  function throttle(fn, timeout) {\n    var timer = null;\n    return function() {\n      if (!timer) {\n        timer = setTimeout(function() {\n          fn();\n          timer = null;\n        }, timeout);\n      }\n    };\n  }\n\n  /**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */\n  function addEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.addEventListener == 'function') {\n      node.addEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.attachEvent == 'function') {\n      node.attachEvent('on' + event, fn);\n    }\n  }\n\n  /**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */\n  function removeEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.removeEventListener == 'function') {\n      node.removeEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.detatchEvent == 'function') {\n      node.detatchEvent('on' + event, fn);\n    }\n  }\n\n  /**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object} The intersection rect or undefined if no intersection\n   *     is found.\n   */\n  function computeRectIntersection(rect1, rect2) {\n    var top = Math.max(rect1.top, rect2.top);\n    var bottom = Math.min(rect1.bottom, rect2.bottom);\n    var left = Math.max(rect1.left, rect2.left);\n    var right = Math.min(rect1.right, rect2.right);\n    var width = right - left;\n    var height = bottom - top;\n\n    return (\n      width >= 0 &&\n      height >= 0 && {\n        top: top,\n        bottom: bottom,\n        left: left,\n        right: right,\n        width: width,\n        height: height,\n      }\n    );\n  }\n\n  /**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {Object} The (possibly shimmed) rect of the element.\n   */\n  function getBoundingClientRect(el) {\n    var rect;\n\n    try {\n      rect = el.getBoundingClientRect();\n    } catch (err) {\n      // Ignore Windows 7 IE11 \"Unspecified error\"\n      // https://github.com/w3c/IntersectionObserver/pull/205\n    }\n\n    if (!rect) return getEmptyRect();\n\n    // Older IE\n    if (!(rect.width && rect.height)) {\n      rect = {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top,\n      };\n    }\n    return rect;\n  }\n\n  /**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {Object} The empty rect.\n   */\n  function getEmptyRect() {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  /**\n   * Checks to see if a parent element contains a child elemnt (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */\n  function containsDeep(parent, child) {\n    var node = child;\n    while (node) {\n      if (node == parent) return true;\n\n      node = getParentNode(node);\n    }\n    return false;\n  }\n\n  /**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */\n  function getParentNode(node) {\n    var parent = node.parentNode;\n\n    if (parent && parent.nodeType == 11 && parent.host) {\n      // If the parent is a shadow root, return the host element.\n      return parent.host;\n    }\n    return parent;\n  }\n\n  // Exposes the constructors globally.\n  window.IntersectionObserver = IntersectionObserver;\n  window.IntersectionObserverEntry = IntersectionObserverEntry;\n})(window, document);\n\n\n\n// WEBPACK FOOTER //\n// ./src/polyfills/intersection-observer.js"],"sourceRoot":""}